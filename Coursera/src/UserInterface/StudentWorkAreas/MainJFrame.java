/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UserInterface.StudentWorkAreas;

import Business.Business;
import UserInterface.FacultyWorkAreas.FacultyLoginJPanel;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Random;
import javax.crypto.AEADBadTagException;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.courses.Assignment;
import model.courses.AssignmentDirectory;
import model.courses.Course;
import model.courses.CourseDirectory;
import model.courses.Schedule;
import model.courses.ScheduleDirectory;
import model.professors.Professor;
import model.professors.ProfessorDirectory;
import model.programs.Program;
import model.programs.ProgramDirectory;
import model.student.Student;
import model.student.StudentDirectory;
import Main.ConfigureABusiness;

/**
 *
 * @author anirudh
 */
public class MainJFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainJFrame
     */
    Business business;
    StudentDirectory studentDirectory;
//    ProgramDirectory programDirectory;
    public MainJFrame() {
        initComponents();
//        programDirectory = new ProgramDirectory();
//        studentDirectory = new StudentDirectory();
//        initData();
        business = ConfigureABusiness.initialize();
        populateDegreeTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        LandingPageJPanel = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        LoginAreaJPanel = new javax.swing.JPanel();
        btnFacultyLogin = new javax.swing.JButton();
        CatalogAreaJPanel = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        lblDegreesOffered = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDegreeList = new javax.swing.JTable();
        txtSearchCourse = new javax.swing.JTextField();
        lblSearchCourse = new javax.swing.JLabel();
        txtDegreeName = new javax.swing.JTextField();
        lblDegreeName = new javax.swing.JLabel();
        txtLevel = new javax.swing.JTextField();
        lblLevel = new javax.swing.JLabel();
        txtCredits = new javax.swing.JTextField();
        lblCredits = new javax.swing.JLabel();
        txtDuration = new javax.swing.JTextField();
        lblDuration = new javax.swing.JLabel();
        btnMoreDetails = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLayeredPane1.setLayout(new java.awt.CardLayout());

        jSplitPane1.setDividerLocation(60);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        btnFacultyLogin.setText("Login");
        btnFacultyLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFacultyLoginActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout LoginAreaJPanelLayout = new javax.swing.GroupLayout(LoginAreaJPanel);
        LoginAreaJPanel.setLayout(LoginAreaJPanelLayout);
        LoginAreaJPanelLayout.setHorizontalGroup(
            LoginAreaJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LoginAreaJPanelLayout.createSequentialGroup()
                .addContainerGap(1318, Short.MAX_VALUE)
                .addComponent(btnFacultyLogin)
                .addGap(122, 122, 122))
        );
        LoginAreaJPanelLayout.setVerticalGroup(
            LoginAreaJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LoginAreaJPanelLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(btnFacultyLogin)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(LoginAreaJPanel);

        lblTitle.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lblTitle.setText("Welcome to Coursera");

        lblDegreesOffered.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        lblDegreesOffered.setText("Degrees offered: ");

        tblDegreeList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Degree Name", "Level", "Credits", "Duration"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblDegreeList);

        txtSearchCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchCourseActionPerformed(evt);
            }
        });

        lblSearchCourse.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        lblSearchCourse.setText("Search course: ");

        txtDegreeName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDegreeNameActionPerformed(evt);
            }
        });

        lblDegreeName.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        lblDegreeName.setText("Degree name: ");

        txtLevel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLevelActionPerformed(evt);
            }
        });

        lblLevel.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        lblLevel.setText("Level: ");

        txtCredits.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCreditsActionPerformed(evt);
            }
        });

        lblCredits.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        lblCredits.setText("Credits: ");

        txtDuration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDurationActionPerformed(evt);
            }
        });

        lblDuration.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        lblDuration.setText("Duration: ");

        btnMoreDetails.setText("See more details");
        btnMoreDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoreDetailsActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CatalogAreaJPanelLayout = new javax.swing.GroupLayout(CatalogAreaJPanel);
        CatalogAreaJPanel.setLayout(CatalogAreaJPanelLayout);
        CatalogAreaJPanelLayout.setHorizontalGroup(
            CatalogAreaJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CatalogAreaJPanelLayout.createSequentialGroup()
                .addContainerGap(163, Short.MAX_VALUE)
                .addGroup(CatalogAreaJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 585, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDegreesOffered))
                .addGroup(CatalogAreaJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CatalogAreaJPanelLayout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addGroup(CatalogAreaJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(CatalogAreaJPanelLayout.createSequentialGroup()
                                .addComponent(lblSearchCourse)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtSearchCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(CatalogAreaJPanelLayout.createSequentialGroup()
                                .addComponent(lblDegreeName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtDegreeName, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(CatalogAreaJPanelLayout.createSequentialGroup()
                                .addComponent(lblLevel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(CatalogAreaJPanelLayout.createSequentialGroup()
                                .addComponent(lblCredits)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtCredits, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(CatalogAreaJPanelLayout.createSequentialGroup()
                                .addComponent(lblDuration)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(31, 31, 31)
                        .addComponent(btnSearch))
                    .addGroup(CatalogAreaJPanelLayout.createSequentialGroup()
                        .addGap(237, 237, 237)
                        .addComponent(btnMoreDetails)))
                .addContainerGap(250, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CatalogAreaJPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblTitle)
                .addGap(631, 631, 631))
        );
        CatalogAreaJPanelLayout.setVerticalGroup(
            CatalogAreaJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CatalogAreaJPanelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(lblTitle)
                .addGap(60, 60, 60)
                .addGroup(CatalogAreaJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CatalogAreaJPanelLayout.createSequentialGroup()
                        .addGroup(CatalogAreaJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSearchCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSearchCourse)
                            .addComponent(btnSearch))
                        .addGap(34, 34, 34)
                        .addGroup(CatalogAreaJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDegreeName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDegreeName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(CatalogAreaJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLevel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(CatalogAreaJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCredits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCredits))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(CatalogAreaJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDuration))
                        .addGap(43, 43, 43)
                        .addComponent(btnMoreDetails))
                    .addGroup(CatalogAreaJPanelLayout.createSequentialGroup()
                        .addComponent(lblDegreesOffered)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(297, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(CatalogAreaJPanel);

        javax.swing.GroupLayout LandingPageJPanelLayout = new javax.swing.GroupLayout(LandingPageJPanel);
        LandingPageJPanel.setLayout(LandingPageJPanelLayout);
        LandingPageJPanelLayout.setHorizontalGroup(
            LandingPageJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );
        LandingPageJPanelLayout.setVerticalGroup(
            LandingPageJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );

        jLayeredPane1.add(LandingPageJPanel, "card2");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1500, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLayeredPane1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLayeredPane1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
        public static void changeScreen(JPanel jPanel)
    {
        jLayeredPane1.removeAll();
        jLayeredPane1.add(jPanel);
        jLayeredPane1.repaint();
        jLayeredPane1.revalidate();
        
    }
        
//        public void initData()
//        {
//            int i =1;
//            Professor professor1 = new Professor();
//            professor1.setProfessorId(i++);
//            professor1.setProfessorName("ani");
//            professor1.setUsername("ani");
//            professor1.setPassw("ani");
//            professor1.setHashedpassw(Professor.hashPassword("ani"));
//            professor1.setPrevHashedPassw(Professor.hashPassword("ani"));
//            professor1.setProfessorRating(5);
//            ProfessorDirectory.professorDirectory.add(professor1);
//            
//            Professor professor2 = new Professor();
//            professor2.setProfessorId(i++);
//            professor2.setProfessorName("john");
//            professor2.setUsername("john");
//            professor2.setPassw("john");
//            professor2.setHashedpassw(Professor.hashPassword("john"));
//            professor2.setPrevHashedPassw(Professor.hashPassword("john"));
//            professor2.setProfessorRating(5);
//            ProfessorDirectory.professorDirectory.add(professor2);
//            
//            Professor professor3 = new Professor();
//            professor3.setProfessorId(i++);
//            professor3.setProfessorName("ray");
//            professor3.setUsername("ray");
//            professor3.setPassw("ray");
//            professor3.setHashedpassw(Professor.hashPassword("ray"));
//            professor3.setPrevHashedPassw(Professor.hashPassword("ray"));
//            professor3.setProfessorRating(5);
//            ProfessorDirectory.professorDirectory.add(professor3);
//            
//            Professor professor4 = new Professor();
//            professor4.setProfessorId(i++);
//            professor4.setProfessorName("adam");
//            professor4.setUsername("adam");
//            professor4.setPassw("adam");
//            professor4.setHashedpassw(Professor.hashPassword("adam"));
//            professor4.setPrevHashedPassw(Professor.hashPassword("adam"));
//            professor4.setProfessorRating(5);
//            ProfessorDirectory.professorDirectory.add(professor4);
//            
//            Professor professor5 = new Professor();
//            professor5.setProfessorId(i++);
//            professor5.setProfessorName("jack");
//            professor5.setUsername("jack");
//            professor5.setPassw("jack");
//            professor5.setHashedpassw(Professor.hashPassword("jack"));
//            professor5.setPrevHashedPassw(Professor.hashPassword("jack"));
//            professor5.setProfessorRating(5);
//            ProfessorDirectory.professorDirectory.add(professor5);
//            
//            Professor professor6 = new Professor();
//            professor6.setProfessorId(i++);
//            professor6.setProfessorName("manny");
//            professor6.setUsername("manny");
//            professor6.setPassw("manny");
//            professor6.setHashedpassw(Professor.hashPassword("manny"));
//            professor6.setPrevHashedPassw(Professor.hashPassword("manny"));
//            professor6.setProfessorRating(5);
//            ProfessorDirectory.professorDirectory.add(professor6);
//            
//            Professor professor7 = new Professor();
//            professor7.setProfessorId(i++);
//            professor7.setProfessorName("Ann");
//            professor7.setUsername("ann");
//            professor7.setPassw("ann");
//            professor7.setHashedpassw(Professor.hashPassword("ann"));
//            professor7.setPrevHashedPassw(Professor.hashPassword("ann"));
//            professor7.setProfessorRating(5);
//            ProfessorDirectory.professorDirectory.add(professor7);
//            
//            Professor professor8 = new Professor();
//            professor8.setProfessorId(i++);
//            professor8.setProfessorName("chris");
//            professor8.setUsername("chris");
//            professor8.setPassw("chris");
//            professor8.setHashedpassw(Professor.hashPassword("chris"));
//            professor8.setPrevHashedPassw(Professor.hashPassword("chris"));
//            professor8.setProfessorRating(5);
//            ProfessorDirectory.professorDirectory.add(professor8);
//            
//            Professor professor9 = new Professor();
//            professor9.setProfessorId(i++);
//            professor9.setProfessorName("harry");
//            professor9.setUsername("harry");
//            professor9.setPassw("harry");
//            professor9.setHashedpassw(Professor.hashPassword("harry"));
//            professor9.setPrevHashedPassw(Professor.hashPassword("harry"));
//            professor9.setProfessorRating(5);
//            ProfessorDirectory.professorDirectory.add(professor9);
//            
//            Professor professor10 = new Professor();
//            professor10.setProfessorId(i++);
//            professor10.setProfessorName("ben");
//            professor10.setUsername("ben");
//            professor10.setPassw("ben");
//            professor10.setHashedpassw(Professor.hashPassword("ben"));
//            professor10.setPrevHashedPassw(Professor.hashPassword("ben"));
//            professor10.setProfessorRating(5);
//            ProfessorDirectory.professorDirectory.add(professor10);
//            
//            
//            
//            int p =1;
//            Program program1 = new Program();
//            program1.setProgramId(p++);
//            program1.setDescription("Organizations can make smarter decisions when they effectively harness the power of data. The business analytics concentration is designed to provide students");
//            program1.setDuration(24);
//            ArrayList <Professor> professorsforProgram1 = new ArrayList();
//            professorsforProgram1.add(professor7);
//            program1.setProfessors(professorsforProgram1);
//            program1.setProgramName("Business Analytics");
//            program1.setLevel("Bachelors");
//            program1.setRating(5);
//            program1.setTotalCredits(32);
//            program1.setTerm("Fall");
//            ProgramDirectory.programDirectory.add(program1);
//            
//            Program program2 = new Program();
//            program2.setProgramId(p++);
//            program2.setDescription("Civil engineers play a vital role in human progress and well-being worldwide. ");
//            program2.setDuration(18);
//            ArrayList <Professor> professorsforProgram2 = new ArrayList();
//            professorsforProgram2.add(professor6);
//            professorsforProgram2.add(professor4);
//            professorsforProgram2.add(professor3);
//            program2.setProfessors(professorsforProgram2);
//            program2.setProgramName("Civil Engineering");
//            program2.setRating(4);
//            program2.setLevel("Bachelors");
//            program2.setTotalCredits(36);
//            program2.setTerm("Summer");
//            ProgramDirectory.programDirectory.add(program2);
//            
//            Program program3 = new Program();
//            program3.setProgramId(p++);
//            program3.setDescription("Cybersecurity combines essential computer science with conceptual and practical specialization in security to prepare students for hands-on, deeply technical work in the field.");
//            program3.setDuration(24);
//            program3.setLevel("Bachelors");
//            ArrayList <Professor> professorsforProgram3 = new ArrayList();
//            professorsforProgram3.add(professor7);
//            professorsforProgram3.add(professor10);
//            professorsforProgram3.add(professor1);
//            professorsforProgram3.add(professor9);
//            program3.setProfessors(professorsforProgram3);
//            program3.setProgramName("Cybersecurity");
//            program3.setRating(5);
//            program3.setTotalCredits(36);
//            program3.setTerm("Fall");
//            ProgramDirectory.programDirectory.add(program3);
//            
//            Program program4 = new Program();
//            program4.setProgramId(p++);
//            program4.setDescription("The components of the Information Age—global communication systems; computers and computer chips");
//            program4.setDuration(20);
//            ArrayList <Professor> professorsforProgram4 = new ArrayList();
//            professorsforProgram4.add(professor10);
//            program4.setProfessors(professorsforProgram4);
//            program4.setProgramName("Electrical Engineering");
//            program4.setRating(4);
//            program4.setLevel("Bachelors");
//            program4.setTotalCredits(32);
//            program4.setTerm("Summer");
//            ProgramDirectory.programDirectory.add(program4);
//            
//            Program program5 = new Program();
//            program5.setProgramId(p++);
//            program5.setDescription("Our Bachelor of Science in Marine Biology aims to provide students with a solid foundation in marine biology");
//            program5.setDuration(24);
//            ArrayList <Professor> professorsforProgram5 = new ArrayList();
//            professorsforProgram5.add(professor3);
//            professorsforProgram5.add(professor10);
//            program5.setProfessors(professorsforProgram5);
//            program5.setProgramName("Marine Biology");
//            program5.setRating(3);
//            program5.setLevel("Bachelors");
//            program5.setTotalCredits(32);
//            program5.setTerm("Fall");
//            ProgramDirectory.programDirectory.add(program5);
//            
//            Program program6 = new Program();
//            program6.setProgramId(p++);
//            program6.setDescription("The program prepares graduates to play pivotal roles in today’s cutting-edge life science, biotechnology");
//            program6.setDuration(24);
//            ArrayList <Professor> professorsforProgram6 = new ArrayList();
//            professorsforProgram6.add(professor7);
//            professorsforProgram6.add(professor10);
//            professorsforProgram6.add(professor3);
//            professorsforProgram6.add(professor9);
//            program6.setProfessors(professorsforProgram6);
//            program6.setProgramName("Bioinformatics");
//            program6.setRating(5);
//            program6.setLevel("Masters");
//            program6.setTotalCredits(32);
//            program6.setTerm("Summer");
//            ProgramDirectory.programDirectory.add(program6);
//            
//            Program program7 = new Program();
//            program7.setProgramId(p++);
//            program7.setDescription("he Master of Science in Information Systems offers cutting-edge expertise in a variety of courses that combine technological advances and business practices.");
//            program7.setDuration(24);
//            ArrayList <Professor> professorsforProgram7 = new ArrayList();
//            professorsforProgram7.add(professor7);
//            professorsforProgram7.add(professor3);
//            professorsforProgram7.add(professor2);
//            program7.setProfessors(professorsforProgram7);
//            program7.setProgramName("Information Systems");
//            program7.setLevel("Masters");
//            program7.setRating(5);
//            program7.setTotalCredits(32);
//            program7.setTerm("Fall");
//            ProgramDirectory.programDirectory.add(program7);
//            
//            Program program8 = new Program();
//            program8.setProgramId(p++);
//            program8.setDescription("Prepare to take on new projects, learn new technologies, hold a leadership role, and help advance the field of computer science");
//            program8.setDuration(24);
//            ArrayList <Professor> professorsforProgram8 = new ArrayList();
//            professorsforProgram8.add(professor8);
//            professorsforProgram8.add(professor6);
//            professorsforProgram8.add(professor3);
//            professorsforProgram8.add(professor9);
//            program8.setProfessors(professorsforProgram8);
//            program8.setProgramName("Computer Science");
//            program8.setLevel("Masters");
//            program8.setRating(5);
//            program8.setTotalCredits(32);
//            program8.setTerm("Summer");
//            ProgramDirectory.programDirectory.add(program8);
//            
//            Program program9 = new Program();
//            program9.setProgramId(p++);
//            program9.setDescription("he Master of Science in Engineering Management offers graduate students an opportunity to develop the technical expertise and the business competence");
//            program9.setDuration(24);
//            ArrayList <Professor> professorsforProgram9 = new ArrayList();
//            professorsforProgram9.add(professor3);
//            professorsforProgram9.add(professor1);
//            program9.setProfessors(professorsforProgram9);
//            program9.setProgramName("Engineering Management");
//            program9.setLevel("Masters");
//            program9.setRating(5);
//            program9.setTotalCredits(32);
//            program9.setTerm("Fall");
//            ProgramDirectory.programDirectory.add(program9);
//            
//            Program program10 = new Program();
//            program10.setProgramId(p++);
//            program10.setDescription("The Master of Science in Software Engineering Systems degree prepares students for in-demand careers as software developers engineering complex");
//            program10.setDuration(24);
//            ArrayList <Professor> professorsforProgram10 = new ArrayList();
//            professorsforProgram10.add(professor2);
//            professorsforProgram10.add(professor6);
//            professorsforProgram10.add(professor3);
//            program10.setProfessors(professorsforProgram10);
//            program10.setProgramName("Software Engineering");
//            program10.setLevel("Masters");
//            program10.setRating(5);
//            program10.setTotalCredits(32);
//            program10.setTerm("Summer");
//            ProgramDirectory.programDirectory.add(program10);
//            
//            
//            int courseno = 1;
//            for(int o= 0;o<10;o++)
//            {
//                for(int k =1; k<=3;k++)
//                {
//                Course course = new Course();
//                course.setCourseId(courseno);
//                course.setTitle("AED"+courseno);
//                course.setCredits(4);
//                course.setDescription("AED"+courseno);
//                courseno++;
//                ArrayList <Program> relatedPrograms = new ArrayList<>();
//                relatedPrograms.add(ProgramDirectory.programDirectory.get(o));
//                HashMap<String, String> syllabus = new HashMap<>();
//                syllabus.put("week1", "week1 syllabus");
//                syllabus.put("week2", "week2 syllabus");
//                syllabus.put("week3", "week3 syllabus");
//                syllabus.put("week4", "week4 syllabus");
//                course.setProgramsItBelongsTo(relatedPrograms);
//                course.setAvailability("Fall");
//                course.setSyllabus(syllabus);
//                CourseDirectory.courseDirectory.add(course);
//                }
//                
//                
//            }
////            for(Course course: CourseDirectory.courseDirectory)
////            {
////                ArrayList<Program> programs= course.getProgramsItBelongsTo();
////                for(Program program: programs)
////                {
////                    System.out.println(course.getCourseId()+" "+program.getProgramId());
////                }
////            }
//            Random random_method = new Random();
////            
//            int scheduleId = 1;
//            for(int q =0;q<10;q++)
//            {
//                Program program = ProgramDirectory.programDirectory.get(q);
//                
//                ArrayList<Professor> programProfessors = program.getProfessors();
//                System.out.println(program.getProgramName() + " " + program.getProgramId() + " " + programProfessors.size());
//                System.out.println(programProfessors.size());
//                ArrayList <Course> programCourses = CourseDirectory.getCoursesForPrograms(program.getProgramId());
//                String []sections = new String[]{"A","B","C"};
//                ArrayList <String> days = new ArrayList<>();
//                days.add("Monday");
//                days.add("Tuesday");
//                days.add("Wednesday");
//                days.add("Thursday");
//                days.add("Friday");
////                String []timeslots = new String[]{"9:00-11:00", "11:00-1:00", "1:00-3:00", "3:00-5:00", "5:00-7:00"};
//                ArrayList <String> timeslots = new ArrayList<>();
//                timeslots.add("9:00AM-11:00AM");
//                timeslots.add("11:00AM-1:00PM");
//                timeslots.add("1:00PM-3:00PM");
//                timeslots.add("3:00PM-5:00PM");
//                timeslots.add("5:00PM-7:00PM");
//                for(int courseIndex = 0; courseIndex<3; courseIndex++)
//                {
//                    Schedule schedule = new Schedule();
//                    schedule.setCourseId(programCourses.get(courseIndex).getCourseId());
//                    schedule.setScheduleId(scheduleId++);
////                    System.out.println(programProfessors.size());
//                    int index = random_method.nextInt(programProfessors.size());
//                    schedule.setProfessorId(programProfessors.get(index).getProfessorId());
//                    int sectionIndex = random_method.nextInt(sections.length);
//                    schedule.setSection(sections[sectionIndex]);
//                    int dayIndex = random_method.nextInt(days.size());
//                    String scheduleDays = days.get(dayIndex)+",";
//                    days.remove(days.get(dayIndex));
//                    dayIndex = random_method.nextInt(days.size());
//                    scheduleDays+= days.get(dayIndex);
//                    schedule.setDays(scheduleDays);
//                    int timeIndex = random_method.nextInt(timeslots.size());
//                    String scheduleTimes = timeslots.get(timeIndex)+",";
//                    timeslots.remove(timeslots.get(timeIndex));
//                    timeIndex = random_method.nextInt(timeslots.size());
//                    scheduleTimes+=timeslots.get(timeIndex);
//                    schedule.setTimeFrames(scheduleTimes);
//                    schedule.setNoOofSeats(20);
//                    ScheduleDirectory.scheduleDirectory.add(schedule);
//                    System.out.println("Program Name: "+ program.getProgramName());
//                    System.out.println("Schedule ID: "+schedule.getScheduleId());
//                    System.out.println("Course ID: "+schedule.getCourseId());
//                    System.out.println("Professor ID: "+schedule.getProfessorId());
////                    System.out.println(programProfessors.get(index).getProfessorId());
//                    System.out.println("Section: "+schedule.getSection());
//                    System.out.println("Days: "+schedule.getDays());
//                    System.out.println("TimeFrames: "+schedule.getTimeFrames());
//                    System.out.println("Seats: "+schedule.getNoOofSeats());
////                    System.out.println(schedule.get);
//                    
//                }
//                
//                
//                
//            }
//            
//
//            
//            
//            int assignmentId = 1;
//            for(Schedule schedule: ScheduleDirectory.scheduleDirectory)
//            {
//                Assignment assignment = new Assignment();
//                assignment.setAssignmentId(assignmentId++);
//                assignment.setCourseId(schedule.getCourseId());
//                assignment.setScheduleId(schedule.getScheduleId());
//                assignment.setTitle("Assignment");
//                assignment.setDescription("Description");
//                assignment.setStatus("UNGRADED");
//                assignment.setTotalMarks(30);
//                assignment.setDueDate("10/12/2025");
//                AssignmentDirectory.assignmentDirectory.add(assignment);
//            }
//            
//            
//            int studentId = 1;
//            String []studentNames = {"Keyon", "Jocelynn", "Avah", "Aubree", "Reyna", "Oliver", "Jayleen", "Derrick", "Andy", "Sloane", "Kaden", "Jean", "Ayden", "Kelly", "Marlene", "Davian", "Raegan", "Allie", "Alannah", "Ernesto", "Gwendolyn", "Sanai", "Aisha", "Dwayne", "Denise", "Fernanda", "Elyse", "Camille", "Skyler", "Brycen", "Joy", "Raelynn"
//, "Emanuel", "Deven", "Susan", "Malakai", "Nikhil", "Audrey", "Maria", "Marcos", "Joe", "Francesca", "Kael", "Ali", "Casey", "Carlos", "Aryana", "Elliott", "Marquise", "Josiah"};  
//            ArrayList <Program> studentPrograms = ProgramDirectory.programDirectory;
//            
//            for(int iu = 0; iu<50; iu++)
//            {
//                
//                int programId = random_method.nextInt(studentPrograms.size())+1;
//                System.out.println(programId);
//                Student student = new Student();
//                student.setStudentId(studentId++);
//                student.setName(studentNames[iu]);
//                student.setDateOfBirth(new Date());
//                student.setEmail("abc@gmail.com");
//                student.setUsername(studentNames[iu]);
//                student.setPassw(studentNames[iu]);
//                int hashedpassword = Student.hashPassword(studentNames[iu]);
//                student.setHashedpassw(hashedpassword);
//                student.setPrevHashedPassw(hashedpassword);
//                student.setDegree(ProgramDirectory.findProgramById(programId).getProgramName());
//                student.setProgramId(programId);
//                student.setTerm(ProgramDirectory.findProgramById(programId).getTerm());
//                StudentDirectory.usersList.add(student);
//                
//            }
//
//                    
//            
//                    
//        }
        

        
        public void populateDegreeTable()
        {

        DefaultTableModel model = (DefaultTableModel) tblDegreeList.getModel();
        model.setRowCount(0);
        
        
        for(Program program : ProgramDirectory.programDirectory)
        {
            Object[] row = new Object[4];
            row[0] = program.getProgramName();
            row[1] = program.getLevel();
            row[2] = program.getTotalCredits();
            row[3] = program.getDuration();
            model.addRow(row);  
            
        }
        }
            
        
    
    private void btnFacultyLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFacultyLoginActionPerformed
        // TODO add your handling code here:
        FacultyLoginJPanel panel = new FacultyLoginJPanel();
        changeScreen(panel);
    }//GEN-LAST:event_btnFacultyLoginActionPerformed

    private void txtSearchCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchCourseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchCourseActionPerformed

    private void txtDegreeNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDegreeNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDegreeNameActionPerformed

    private void txtLevelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLevelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLevelActionPerformed

    private void txtCreditsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCreditsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCreditsActionPerformed

    private void txtDurationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDurationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDurationActionPerformed

    private void btnMoreDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoreDetailsActionPerformed
        // TODO add your handling code here:
        ProgramDetailsJPanel panel = new ProgramDetailsJPanel();
        MainJFrame.changeScreen(panel);
    }//GEN-LAST:event_btnMoreDetailsActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSearchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel CatalogAreaJPanel;
    public static javax.swing.JPanel LandingPageJPanel;
    public static javax.swing.JPanel LoginAreaJPanel;
    private javax.swing.JButton btnFacultyLogin;
    private javax.swing.JButton btnMoreDetails;
    private javax.swing.JButton btnSearch;
    public static javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JLabel lblCredits;
    private javax.swing.JLabel lblDegreeName;
    private javax.swing.JLabel lblDegreesOffered;
    private javax.swing.JLabel lblDuration;
    private javax.swing.JLabel lblLevel;
    private javax.swing.JLabel lblSearchCourse;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblDegreeList;
    private javax.swing.JTextField txtCredits;
    private javax.swing.JTextField txtDegreeName;
    private javax.swing.JTextField txtDuration;
    private javax.swing.JTextField txtLevel;
    private javax.swing.JTextField txtSearchCourse;
    // End of variables declaration//GEN-END:variables
}
